.row 
  %p = @friends
  %p = @info

.row
  %p
  .viz 
  :javascript
      var w = 960, h = 500;
      var labelDistance = 0;
      var vis = d3.select("body").append("svg:svg").attr("width", w).attr("height", h);
      //init data 


      var nodes = [];
      var labelAnchors = [];
      var labelAnchorLinks = [];
      var links = [];
      // ? 

    var node = {label: "ksmetana"}
    nodes.push(node);

    labelAnchors.push({
      node : node
    });
    labelAnchors.push({
      node : node
    });


    for(var i in gon.friends)
     {
        var node = {
          label: gon.friends[i].name
        };
        nodes.push(node);

        labelAnchors.push({
          node : node
        });
        labelAnchors.push({
          node : node
        });
     }

      //?

      for(var i = 1; i < nodes.length; i++) {

        links.push({
              source : 0,
              target : i,
              weight : Math.random()
        });

        labelAnchorLinks.push({
          source : i * 2,
          target : i * 2 + 1,
          weight : 1
        });

      };



      // set up 
      var force = d3.layout.force().size([w, h]).nodes(nodes).links(links).gravity(1).linkDistance(50).charge(-3000).linkStrength(function(x) {
        return x.weight * 10
      });


      force.start();

      var force2 = d3.layout.force().nodes(labelAnchors).links(labelAnchorLinks).gravity(0).linkDistance(0).linkStrength(8).charge(-100).size([w, h]);
      force2.start();

      var link = vis.selectAll("line.link").data(links).enter().append("svg:line").attr("class", "link").style("stroke", "#CCC");

      var node = vis.selectAll("g.node").data(force.nodes()).enter().append("svg:g").attr("class", "node");
      node.append("svg:circle").attr("r", 5).style("fill", "#555").style("stroke", "#FFF").style("stroke-width", 3);
      node.call(force.drag);


      var anchorLink = vis.selectAll("line.anchorLink").data(labelAnchorLinks)//.enter().append("svg:line").attr("class", "anchorLink").style("stroke", "#999");

      var anchorNode = vis.selectAll("g.anchorNode").data(force2.nodes()).enter().append("svg:g").attr("class", "anchorNode");
      anchorNode.append("svg:circle").attr("r", 0).style("fill", "#FFF");
        anchorNode.append("svg:text").text(function(d, i) {
        return i % 2 == 0 ? "" : d.node.label
      }).style("fill", "#555").style("font-family", "Arial").style("font-size", 12);

      var updateLink = function() {
        this.attr("x1", function(d) {
          return d.source.x;
        }).attr("y1", function(d) {
          return d.source.y;
        }).attr("x2", function(d) {
          return d.target.x;
        }).attr("y2", function(d) {
          return d.target.y;
        });

      }

      var updateNode = function() {
        this.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });

      }


      force.on("tick", function() {

        force2.start();

        node.call(updateNode);

        anchorNode.each(function(d, i) {
          if(i % 2 == 0) {
            d.x = d.node.x;
            d.y = d.node.y;
          } else {
            var b = this.childNodes[1].getBBox();

            var diffX = d.x - d.node.x;
            var diffY = d.y - d.node.y;

            var dist = Math.sqrt(diffX * diffX + diffY * diffY);

            var shiftX = b.width * (diffX - dist) / (dist * 2);
            shiftX = Math.max(-b.width, Math.min(0, shiftX));
            var shiftY = 5;
            this.childNodes[1].setAttribute("transform", "translate(" + shiftX + "," + shiftY + ")");
          }
        });


        anchorNode.call(updateNode);

        link.call(updateLink);
        anchorLink.call(updateLink);

      });

  
.row
  .span6
    %h1
      = @user.name | 
      = @user1.name
      %small
        = "@#{@user.screen_name}"
    - unless @user.description.blank?
      %h6
        = @user.description
  .span6
    %table.table
      %thead
        %tr
          %th
            = t('th.tweets')
          %th
            = t('th.following')
          %th
            = t('th.followers')
          %th
            = t('th.favorites')
      %tbody
        %tr
          %td
            = number_with_delimiter @user.statuses_count
          %td
            = number_with_delimiter @user.friends_count
          %td
            = number_with_delimiter @user.followers_count
          %td
            = number_with_delimiter @user.favorites_count
.row
  .span12
    - unless @user.status.blank?
      %blockquote
        %q{cite: 'https://twitter.com/#{@user.screen_name}/status/#{@user.status.id}'}
          %p
            = auto_link(@user.status.text.dup).html_safe
        %small
          = t('time.ago', time: time_ago_in_words(@user.status.created_at).capitalize)
          = t('via.source', source: @user.status.source).html_safe
.row
  .span6
    %dl.dl-horizontal
      %dt
        Access&nbsp;token
      %dd
        = session['access_token']
      %dt
        Access&nbsp;token&nbsp;secret
      %dd
        = session['access_token_secret']
  .span2.offset4
    = form_tag(signout_path, method: 'delete') do
      %fieldset
        %button.btn.btn-danger#sign_out
          = t('button.sign_out')


.row 
  = @friends1.inspect
